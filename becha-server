#!/usr/bin/env ruby

require 'pathname'
require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'socket'
require 'yaml'


class Pathname
  def extname= (extension)
    @path = @path[0..@path.length-extname.length-1]
    if extension.length > 0
      @path << '.' if extension[0] != '.'
      @path << extension.to_s
    end
  end

  def chext (extension)
    res = self.clone
    res.extname = extension

    res
  end
end


APP_VERSION = 'BECHA-server v1.0.0'
ARGV_COUNT = 1


def parse_options(args)
    options = OpenStruct.new

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: becha-server [options] cmd [args]\n\n" +
      "Avalaible commands:\n" +
      "  power-on\t\t- Power ON the tape recorder\n" +
      "  power-off\t\t- Power OFF the tape recorder\n" +
      "  record track-path\t\t- Record track into the tape recorder"

      options.verbose = false
      options.playlist_path = Pathname.new('./becha.playlist.conf').expand_path
      options.log_path = Pathname.new('./becha.log').expand_path
      options.errlog_path = Pathname.new('./becha.error.log').expand_path
      options.port = 2014

      opts.separator ""
      opts.separator "Common options:"

      opts.on("-l", "--playlist path", String, "Define playlist information") do |path|
        options.playlist_path = Pathname.new path
      end

      opts.on("-p", "--port num", Integer, "Define UDP port number") do |port|
        options.port = port
      end

      opts.on("-e", "--log path", String, "Define log file") do |path|
        options.log_path = Pathname.new path
      end

      opts.on("-E", "--errlog path", String, "Define log file for errors") do |path|
        options.errlog_path = Pathname.new path
      end

      opts.on("--verbose", "Print extra information") do
        options.verbose = true
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opts.on_tail("--version", "Show version") do
        puts APP_VERSION
        exit
      end
    end

    opt_parser.parse!(args)
    [options, opt_parser]
  end

res = parse_options(ARGV)
options = res[0]
opt_parser = res[1]

if ARGV.count < ARGV_COUNT
  p opt_parser

  exit 1
end

argv = ARGV.reverse

cmd = argv.pop


case cmd
when 'power-on'
  playlist_path = Pathname.new(options.playlist_path.expand_path)
  playlist = YAML::load(IO.read playlist_path.expand_path)

  raise 'Config file is corrupted' unless playlist.class == Hash

  puts "Starting daemon..."

  Process.daemon

  STDOUT.reopen options.log_path.expand_path, 'a'
  STDERR.reopen options.errlog_path.expand_path, 'a'

  $stdout = STDOUT
  $stderr = STDERR

  STDOUT.sync = true
  STDERR.sync = true

  sock = UDPSocket.new
  sock.bind '', options.port

  puts "[#{Time.now}] Server started!"

  loop do
    packet = sock.recvfrom 32 

    if packet[0] == "quit"
      puts "[#{Time.now}] Exiting..."
      Process.kill "KILL", $mplayer_pid unless $mplayer_pid.nil?
      exit 0
    end

    puts "[#{Time.now}] Received data: #{packet[0].to_s}"

    if playlist.has_key? packet[0].to_s
      puts "[#{Time.now}] Start playing: #{playlist[packet[0].to_s]}"

      begin
        Process.kill "KILL", $mplayer_pid unless $mplayer_pid.nil?
        $mplayer_pid = fork do
          `mplayer "#{playlist[packet[0].to_s]}"`
        end
      rescue => error
        puts 'Error playing'
        p error
        p "#{playlist[packet[0].to_s]}"
        $mplayer_pid = nil
      end

    else
      puts "[#{Time.now}] Item not found"

      begin
        Process.kill "KILL", $mplayer_pid unless $mplayer_pid.nil?
        $mplayer_pid = nil
      rescue
        $mplayer_pid = nil
      end
    end
  end
  loop { } 
when 'power-off'
  sock = UDPSocket.new
  sock.send 'quit', 0, 'localhost', options.port
when 'record'
  playlist_path = Pathname.new options.playlist_path.expand_path
  begin
    playlist = YAML::load IO.read playlist_path.expand_path
  rescue
    playlist = {}
  end

  raise 'Config file is corrupted' unless playlist.class == Hash

  track_path = argv.pop

  p opt_parser if track_path.nil?

  track_path = Pathname.new(track_path).expand_path

  sock = UDPSocket.new
  sock.bind '', 2000

  loop do
    packet = sock.recvfrom 24

    if packet[0].length == 0
      puts "Received error packet, retrying..."
    else
      playlist[packet[0]] = track_path
      IO.write playlist_path.expand_path, YAML::dump(playlist)

      if playlist == YAML::load(IO.read playlist_path.expand_path)
        puts "Recording successful: #{packet[0]} -> #{track_path}"
        break
      else
        puts "Recording error!"
        p playlist
        p '---'
        p YAML::load(IO.read playlist_path.expand_path)
      end
    end
  end
else
  p 'Undefined command'
  p opt_parser
  exit 1
end

exit 0

# vim: sw=2 sts=2 ts=8:

