#!/usr/bin/ruby19

require 'pathname'
require 'optparse'
require 'optparse/time'
require 'ostruct'

ARGV_COUNT = 1

class Pathname
  def extname= (extension)
    @path = @path[0..@path.length-extname.length-1]
    if extension.length > 0
      @path << '.' if extension[0] != '.'
      @path << extension.to_s
    end
  end

  def chext (extension)
    res = self.clone
    res.extname = extension

    res
  end
end

APP_VERSION = 'tape_recorder v0.1'

def parse_options(args)
    options = OpenStruct.new

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: tape_recorder [options] cmd\n"
      "Avalaible commands:\n"
      "  power-on\t\t- Power ON the tape recorder\n"
      "  record\t\t- Record track into the tape recorder"

      options.verbose = false

      opts.separator ""
      opts.separator "Options for command 'record':"

      opts.on("--track audio-file", String, "Define audio file for record") do |path|
        options.audiofile = Pathname.new(path).expand_path
      end

      opts.separator ""
      opts.separator "Common options:"

      opts.on("--verbose", "Print extra information") do
        options.verbose = true
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opts.on_tail("--version", "Show version") do
        puts APP_VERSION
        exit
      end
    end

    opt_parser.parse!(args)
    [options, opt_parser]
  end

res = parse_options(ARGV)
options = res[0]
opt_parser = res[1]

if ARGV.count != ARGV_COUNT
  p opt_parser

  exit 1
end

argv = ARGV.reverse

cmd = argv.pop

if cmd == 'record'
  audiofile_path = options.audiofile 

  raise ArgumentError, 'file (%s) is not readable' % audiofile_path.to_s unless audiofile_path.readable_real?

  if options.verbose
  end
end

# Do it!

case cmd
when 'power-on'
  # TODO: do power-on
  # spawn daemon
  # loop(1)
  #   receive RFID
  #   get audiofile associated with the RFID
  #   start to play
  # end
when 'record'
  # TODO: do record
  # 1. wait for RFID
  # 2. save record to base
else
  p 'Undefined command'
  p opt_parser
  exit 1
end

exit 0

# vim: sw=2 sts=2 ts=8:

